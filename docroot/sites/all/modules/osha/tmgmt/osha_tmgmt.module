<?php

define('OSHA_TMGMT_DEFAULT_SOURCE_LANGUAGE', 'en');
define('OSHA_TMGMT_DEFAULT_TARGET_LANGUAGE', 'ro');
define('OSHA_TMGMT_WORDS_PER_PAGE', 250);

define('OSHA_TMGMT_JOB_PRIORITY_HIGH', 2);
define('OSHA_TMGMT_JOB_PRIORITY_LOW', 1);
define('OSHA_TMGMT_JOB_PRIORITY_NORMAL', 0);

/**
 * Implements hook_schema_alter().
 */
function osha_tmgmt_schema_alter(&$schema) {
  if (isset($schema['tmgmt_job_item'])) {
    $schema['tmgmt_job_item']['fields']['target_language'] = array(
      'type' => 'varchar',
      'size' => 12,
      'not null' => FALSE,
      'description' => 'The language the data should be translated to.',
    );
    $schema['tmgmt_job_item']['fields']['source_language'] = array(
      'type' => 'varchar',
      'size' => 12,
      'default' => '',
      'not null' => FALSE,
      'description' => 'The default entity language',
    );
    $schema['tmgmt_job_item']['fields']['character_count'] = array(
      'type' => 'int',
      'default' => 0,
      'not null' => TRUE,
      'description' => 'Number of characters for this job',
    );
    $schema['tmgmt_job_item']['fields']['page_count'] = array(
      'type' => 'numeric',
      'precision' => 6,
      'scale' => 2,
      'default' => 0,
      'not null' => TRUE,
      'description' => 'Number of pages for this job',
    );
  }
  if (isset($schema['tmgmt_job'])) {
    $schema['tmgmt_job']['fields']['character_count'] = array(
      'type' => 'int',
      'default' => 0,
      'not null' => TRUE,
      'description' => 'Number of characters for this job',
    );
    $schema['tmgmt_job']['fields']['page_count'] = array(
      'type' => 'numeric',
      'precision' => 6,
      'scale' => 2,
      'default' => 0,
      'not null' => TRUE,
      'description' => 'Number of pages for this job',
    );
    $schema['tmgmt_job']['fields']['priority'] = array(
      'type' => 'int',
      'unsigned' => FALSE,
      'default' => 0,
      'not null' => TRUE,
      'description' => 'Urgency of the translation (0=normal/1=high)',
    );
  }
}

/**
 * Implements hook_tmgmt_file_format_info().
 */
function osha_tmgmt_tmgmt_file_format_plugin_info() {
  return array(
    'xml' => array(
      'label' => t('CDT XML file'),
      'plugin controller class' => 'OSHATranslatorFileformatCDT',
    ),
  );
}

/**
 * Implements hook_tmgmt_translator_plugin_info().
 */
function osha_tmgmt_tmgmt_translator_plugin_info_alter(&$info) {
  if (isset($info['file'])) {
    $info['file']['plugin controller class'] = 'OSHATMGMTFileTranslatorPluginController';
  }
}

/**
 * Implements hook_tmgmt_source_plugin_info_alter().
 */
function osha_tmgmt_tmgmt_source_plugin_info_alter(&$info) {
  $info['entity']['plugin controller class'] = 'OSHATMGMTEntitySourcePluginController';
}

/**
 * Implements hook_entity_info_alter().
 */
function osha_tmgmt_entity_info_alter(&$entity_info) {
  if (isset($entity_info['tmgmt_job_item'])) {
    $entity_info['tmgmt_job_item']['views controller class'] = 'OshaTMGMTJobItemViewsController';
    $entity_info['tmgmt_job_item']['entity class'] = 'OshaTMGMTJobItem';
    $entity_info['tmgmt_job_item']['metadata controller class'] = 'OshaTMGMTJobItemMetadataController';
  }
  if (isset($entity_info['tmgmt_job'])) {
    $entity_info['tmgmt_job']['views controller class'] = 'OshaTMGMTJobViewsController';
  }
}

/**
 * Implements hook_menu_local_tasks_alter().
 *
 * Hide unwanted translation sources tabs from tmgmt interface.
 */
function osha_tmgmt_menu_local_tasks_alter(&$items) {
  $disable = array(
    'admin/tmgmt/sources/i18n_string_taxonomy_term',
    'admin/tmgmt/sources/i18n_string_taxonomy_vocabulary',
  );
  if (isset($items['tabs']['1']['output']) && is_array($items['tabs']['1']['output'])) {
    foreach ($items['tabs']['1']['output'] as $index => &$tab) {
      if (isset($tab['#link']['path'])
          && in_array($tab['#link']['path'], $disable)) {
        $tab['#link']['access'] = FALSE;
        unset($items['tabs']['1']['output'][$index]);
      }
    }
  }
}

/**
 * Implements hook_views_api().
 */
function osha_tmgmt_views_api() {
  return array('api' => 3.0);
}

/**
 * Implements hook_views_default_views().
 */
function osha_tmgmt_views_default_views() {
  $views = array();
  $files = file_scan_directory(drupal_get_path('module', 'osha_tmgmt') . '/views', '/.view\.inc$/');
  foreach (array_keys($files) as $filepath) {
    require $filepath;
    if (isset($view)) {
      $views[$view->name] = $view;
    }
  }
  return $views;
}

/**
 * Implements hook_preprocess_page().
 *
 * Hides tmgmt help in the OSHA content selection screen.
 */
function osha_tmgmt_preprocess_page(&$variables) {
  if ($_GET['q'] == 'admin/tmgmt/sources'
      || $_GET['q'] == 'admin/tmgmt/sources/osha') {
    if (isset($variables['page']['help']['system_help']['#markup'])) {
      $variables['page']['help']['system_help']['#markup'] = '';
    };
  }
}

/**
 * Implements hook_form_alter().
 */
function osha_tmgmt_form_alter(&$form, &$form_state, $form_id) {
  // Checks if the form is a source item form, and generates it's supposed id.
  $form_source_id = '';
  if (isset($form_state['plugin']) && isset($form_state['item_type'])) {
    $form_source_id = 'tmgmt_ui_' . $form_state['plugin'] . '_source_' . $form_state['item_type'] . '_overview_form';
  }

  switch ($form_id) {
    case $form_source_id:
      if (isset($form['actions']['submit'])) {
        unset($form['actions']['submit']);
      }
      break;

    case 'tmgmt_ui_cart_content':
      $languages = tmgmt_available_languages();
      $options = array();
      $job_char_count = 0;
      $job_page_count = 0;
      foreach (tmgmt_ui_cart_get()->getJobItemsFromCart() as $item) {
        OshaTMGMTStatistics::computeJobItemStatistics($item);
        $job_char_count += $item->character_count;
        $job_page_count += $item->page_count;
        $uri = $item->getSourceUri();
        $options[$item->tjiid] = array(
          $item->getSourceType(),
          (!empty($uri['path']) ? l($item->label(), $uri['path']) : $item->label()),
          round($item->page_count, 2),
          $item->character_count,
          isset($languages[$item->getSourceLangCode()]) ? $languages[$item->getSourceLangCode()] : t('Unknown'),
        );
      }

      $form['items'] = array(
        '#type' => 'tableselect',
        '#header' => array(
          t('Type'),
          t('Content'),
          t('Page Count') . "( " . round($job_page_count, 2) . " )",
          t('Character Count') . "( " . $job_char_count . " )",
          t('Language'),
        ),
        '#empty' => t('There are no items in your cart.'),
        '#options' => $options,
      );
      $form['request_translation']['#submit'] = array('osha_tmgmt_tmgmt_ui_cart_content_submit');
      $form['priority'] = array(
        '#title' => t('Job priority'),
        '#type' => 'select',
        '#options' => array(0 => 'Normal', 2 => 'High', 1 => 'Low'),
        '#weight' => 0,
      );
      break;

    case 'tmgmt_job_form':
      $languages = tmgmt_available_languages();
      $job = $form_state['tmgmt_job'];
      $target_languages_codes = OshaTMGMTStatistics::getJobTargetLanguages($job);
      $target_languages = array();
      foreach ($target_languages_codes as $lang_code) {
        $target_languages[$lang_code] = $languages[$lang_code];
      }
      $wrapper = entity_metadata_wrapper('tmgmt_job', $job);
      drupal_set_title(t('@title - @state', array(
        '@title' => $job->label(),
        '@state' => $wrapper->state->label(),
      )));

      $form['language_info'] = array(
        '#type' => 'container',
        '#attributes' => array('class' => array('tmgmt-ui-job-info', 'clearfix')),
        '#weight' => 1,
      );

      $form['language_info']['target_languages'] = array(
        '#title' => t('Target languages'),
        '#type' => 'checkboxes',
        '#default_value' => $target_languages,
        '#options' => drupal_map_assoc($target_languages),
        '#disabled' => TRUE,
        '#weight' => 1,
        '#attributes' => array('class' => array('container-inline')),
      );

      $form['language_info']['target_languages_not'] = array(
        '#type' => 'checkboxes',
        '#options' => drupal_map_assoc(array_diff($languages, $target_languages)),
        '#disabled' => TRUE,
        '#weight' => 2,
        '#attributes' => array('class' => array('container-inline')),
      );

      $form['info']['total_character_count'] = array(
        '#title' => t('Total character count'),
        '#type'  => 'item',
        '#markup' => $job->character_count,
        '#prefix' => '<div id="tmgmt-ui-character-count" class="tmgmt-ui-character-count tmgmt-ui-info-item">',
        '#suffix' => '</div>',
      );
      $form['info']['page_count'] = array(
        '#title' => t('Page count'),
        '#type'  => 'item',
        '#markup' => $job->page_count,
        '#prefix' => '<div id="tmgmt-ui-page-count" class="tmgmt-ui-page-count tmgmt-ui-info-item">',
        '#suffix' => '</div>',
      );

      hide($form['info']['source_language']);
      hide($form['info']['target_language']);
      hide($form['info']['translator']);
      if ($form_state['tmgmt_job']->state == TMGMT_JOB_STATE_UNPROCESSED) {
        hide($form['translator_wrapper']);
        if (isset($form['job_items_wrapper']['suggestions'])) {
          hide($form['job_items_wrapper']['suggestions']);
        }
      }
      if (isset($form['info']['created'])) {
        $created = $form['info']['created'];
        unset($form['info']['created']);
        $form['info']['created'] = $created;
      }
      break;

    case 'tmgmt_entity_ui_translate_form':
      list($id, $vid, $bundle) = entity_extract_ids($form_state['entity_type'], $form_state['entity']);
      $entity_language = entity_language($form_state['entity_type'], $form_state['entity']);
      $items = osha_tmgmt_job_item_load_latest('entity', $form_state['entity_type'], $id, $entity_language);

      // Remove all previously disabled checkboxes - we override that.
      $languages = language_list();

      foreach ($languages as $langcode => $language) {
        // Reset the pending column and ordering, rebuild based on job item.
        unset($form['languages'][$langcode]);
        //@TODO:EDW Improve handling of column index below
        $form['languages']['#options'][$langcode][4] = t('None');

        if ($langcode == $entity_language) {
          $form['languages'][$langcode] = array(
            '#type' => 'checkbox',
            '#disabled' => TRUE,
          );
        }
        elseif (isset($items[$langcode])) {
          $item = $items[$langcode];
          $uri = $item->uri();
          $wrapper = entity_metadata_wrapper('tmgmt_job_item', $item);
          $additional = l($wrapper->state->label(), $uri['path'], array('query' => array('destination' => current_path())));
          // Disable the checkbox for this row since there is already a
          // translation in progress that has not yet been finished. This way we
          // make sure that we don't stack multiple active translations for the
          // same item on top of each other.
          //@TODO:EDW Improve handling of column index below
          $form['languages']['#options'][$langcode][4] = $additional;
          $form['languages'][$langcode] = array(
            '#type' => 'checkbox',
            '#disabled' => TRUE,
          );
        }
      }
      break;

  }
}

/**
 * Overrides form submit for tmgmt cart checkout.
 */
function osha_tmgmt_tmgmt_ui_cart_content_submit($form, &$form_state) {
  global $user;
  $job_empty = TRUE;
  $values = $form_state['values'];
  $target_languages = array_filter($values['target_language']);
  $job_items_by_source_language = array();
  // Group the selected items by source language.
  foreach (tmgmt_job_item_load_multiple(array_filter($form_state['values']['items'])) as $job_item) {
    $job_items_by_source_language[$job_item->getSourceLangCode()][$job_item->tjiid] = $job_item;
  }
  $job = tmgmt_job_create(
    OSHA_TMGMT_DEFAULT_SOURCE_LANGUAGE,
    OSHA_TMGMT_DEFAULT_TARGET_LANGUAGE,
    $user->uid
  );
  $remove_job_item_ids = array();
  // Loop over all target languages, create a job for each source and target
  // language combination add add the relevant job items to it.
  foreach ($target_languages as $target_language) {
    $job_empty = TRUE;
    foreach ($job_items_by_source_language as $source_language => $job_items) {
      // Skip in case the source language is the same as the target language.
      if ($source_language == $target_language) {
        continue;
      }
      /* @var TMGMTJobItem $job_item */
      foreach ($job_items as $id => $job_item) {
        try {
          // As the same item might be added to multiple jobs, we need to
          // re-create them and delete the old ones, after removing them from
          // the cart.
          $new_job_item = $job->addItem($job_item->plugin, $job_item->item_type, $job_item->item_id);
          $new_job_item->source_language = $source_language;
          $new_job_item->target_language = $target_language;
          // @TODO: Set plugin type entity on add to cart, not here (ugly).
          if ($new_job_item->plugin == 'node') {
            $new_job_item->plugin = 'entity';
          }
          OshaTMGMTStatistics::computeJobItemStatistics($new_job_item);
          $new_job_item->save();
          $remove_job_item_ids[$job_item->tjiid] = $job_item->tjiid;
          $job_empty = FALSE;
        }
        catch (Exception $e) {
          // If an item fails for one target language, then it is also going
          // to fail for others, so remove it from the array.
          unset($job_items_by_source_language[$source_language][$id]);
          drupal_set_message($e->getMessage(), 'error');
        }
      }
    }
  }
  if (!$job_empty) {
    // Remove assigned job items from the cart.
    if ($remove_job_item_ids) {
      tmgmt_ui_cart_get()->removeJobItems($remove_job_item_ids);
      entity_delete_multiple('tmgmt_job_item', $remove_job_item_ids);
    }
    if ($job) {
      // Set the title to job #
      $job->label = t('Translation job #!tjid', array('!tjid' => $job->tjid));
      $job->priority = $values['priority'];
      OshaTMGMTStatistics::computeJobStatistics($job);
      $job->save();

      // This whole block replaces tmgmt_ui_job_checkout_and_redirect().
      $redirects = tmgmt_ui_job_checkout_multiple(array($job));
      if ($redirects) {
        if (isset($_GET['destination'])) {
          // Remove existing destination, as that will prevent us from being
          // redirect to the job checkout page. Set the destination as the final
          // redirect instead.
          tmgmt_ui_redirect_queue_set($redirects, $_GET['destination']);
          unset($_GET['destination']);
        }
        else {
          tmgmt_ui_redirect_queue_set($redirects, current_path());
        }
        $form_state['redirect'] = tmgmt_ui_redirect_queue_dequeue();

        // Count of the job messages is one less due to the final redirect.
        drupal_set_message(format_plural(count($redirects), t('One job needs to be checked out.'), t('@count jobs need to be checked out.')));
      }
    }
  }
  else {
    //TODO: Delete the job ...?
  }
}


/**
 * Loads active job entities that have a job item with the identifiers.
 *
 * @param $plugin
 *   The source plugin.
 * @param $item_type
 *   The source item type.
 * @param $item_id
 *   The source item id.
 * @param string $source_language
 *   The source language of the item.
 *
 * @return array
 *   An array of job entities.
 */function osha_tmgmt_job_item_load_latest($plugin, $item_type, $item_id, $source_language) {
  $query = db_select('tmgmt_job_item', 'tji');
  $query->innerJoin('tmgmt_job', 'tj', 'tj.tjid = tji.tjid');
  $result = $query->condition('tj.source_language', $source_language)
    // Only query for jobs that are currently active.
    ->condition('tj.state', array(TMGMT_JOB_STATE_UNPROCESSED, TMGMT_JOB_STATE_ACTIVE))
    // And only query for job items that are not yet finished.
    ->condition('tji.state', TMGMT_JOB_ITEM_STATE_ACCEPTED, '<>')
    ->condition('tji.plugin', $plugin)
    ->condition('tji.item_type', $item_type)
    ->condition('tji.item_id', $item_id)
    ->fields('tji', array('tjiid'))
    ->fields('tj', array('target_language'))
    ->orderBy('tji.changed', 'DESC')
    ->groupBy('tji.tjiid')
    ->execute();
  if ($items = $result->fetchAllKeyed()) {
    $return = array();
    foreach (tmgmt_job_item_load_multiple(array_keys($items)) as $key => $item) {
      $return[$item->target_language] = $item;
    }
    return $return;
  }
  return FALSE;
}


/**
 * Implements hook_views_default_views_alter().
 */
function osha_tmgmt_views_default_views_alter(&$views) {
  if (isset($views['tmgmt_ui_job_items'])) {
    $handler =& $views['tmgmt_ui_job_items']->display['default'];

    // Hide word count.
    unset($handler->display_options['fields']['word_count_1']);

    /* Field: Translation Management Job Item: Source language */
    $handler->display_options['fields']['source_language']['id'] = 'source_language';
    $handler->display_options['fields']['source_language']['table'] = 'tmgmt_job_item';
    $handler->display_options['fields']['source_language']['field'] = 'source_language';

    /* Field: Translation Management Job Item: Target language */
    $handler->display_options['fields']['target_language']['id'] = 'target_language';
    $handler->display_options['fields']['target_language']['table'] = 'tmgmt_job_item';
    $handler->display_options['fields']['target_language']['field'] = 'target_language';

    /* Field: Translation Management Job Item: Character count */
    $handler->display_options['fields']['page_count']['id'] = 'page_count';
    $handler->display_options['fields']['page_count']['table'] = 'tmgmt_job_item';
    $handler->display_options['fields']['page_count']['field'] = 'page_count';

    /* Field: Translation Management Job Item: Character count */
    $handler->display_options['fields']['character_count']['id'] = 'character_count';
    $handler->display_options['fields']['character_count']['table'] = 'tmgmt_job_item';
    $handler->display_options['fields']['character_count']['field'] = 'character_count';

    // Reorder view fields.
    foreach (array('type', 'progress', 'state', 'changed', 'operations') as $column) {
      if (isset($handler->display_options['fields'][$column])) {
        $settings = $handler->display_options['fields'][$column];
        unset($handler->display_options['fields'][$column]);
        $handler->display_options['fields'][$column] = $settings;
      }
    }
  }

  if (isset($views['tmgmt_ui_job_overview'])) {
    $handler =& $views['tmgmt_ui_job_overview']->display['default'];

    // Remove un-needed filters.
    unset($handler->display_options['filters']['source_language']);
    unset($handler->display_options['filters']['target_language']);
    unset($handler->display_options['filters']['translator']);

    // Remove un-needed columns.
    unset($handler->display_options['fields']['source_language']);
    unset($handler->display_options['fields']['target_language']);
    unset($handler->display_options['fields']['translator']);
    unset($handler->display_options['fields']['word_count']);

    /* Field: Translation Management Job: Priority */
    $handler->display_options['fields']['priority']['id'] = 'priority';
    $handler->display_options['fields']['priority']['table'] = 'tmgmt_job';
    $handler->display_options['fields']['priority']['field'] = 'priority';

    /* Field: Translation Management Job: Page count */
    $handler->display_options['fields']['page_count']['id'] = 'page_count';
    $handler->display_options['fields']['page_count']['table'] = 'tmgmt_job';
    $handler->display_options['fields']['page_count']['field'] = 'page_count';

    /* Field: Translation Management Job: Character count */
    $handler->display_options['fields']['character_count']['id'] = 'character_count';
    $handler->display_options['fields']['character_count']['table'] = 'tmgmt_job';
    $handler->display_options['fields']['character_count']['field'] = 'character_count';

    // Reorder view fields.
    foreach (array('progress', 'changed', 'operations') as $column) {
      if (isset($handler->display_options['fields'][$column])) {
        $settings = $handler->display_options['fields'][$column];
        unset($handler->display_options['fields'][$column]);
        $handler->display_options['fields'][$column] = $settings;
      }
    }

  }
}


class OshaTMGMTStatistics {

  /**
   * Compute statistics such as character/page count for a job item.
   *
   * @param TMGMTJobItem $job_item
   *   Attach statistical information to the job item
   */
  public static function computeJobItemStatistics(&$job_item) {
    $job_item->character_count = 0;
    $job_item->page_count = 0;

    if ($job_item->item_type == "node" || $job_item->item_type == "taxonomy_term") {
      $entity = entity_load_single($job_item->item_type, $job_item->item_id);
      if (!$entity) {
        throw new TMGMTException(t('Unable to load entity %type with id %id', array('%type' => $job_item->item_type, $job_item->item_id)));
      }
      $source_language = isset($entity->language) ? $entity->language : 'en';
      $data = tmgmt_field_get_source_data($job_item->item_type, $entity, $source_language, TRUE);
    }
    else {
      $data = $job_item->getSourceData();
    }
    self::count($data, $ret);
    $job_item->character_count = $ret;
    if ($job_item->character_count > 0) {
      $cpp = variable_get('osha_tmgmt_characters_per_page', 1500);
      $job_item->page_count = $job_item->character_count / $cpp;
    }
  }

  /**
   * Compute statistics such as character/page count for a job.
   *
   * @param TMGMTJob $job
   *   Attach statistical information to the job
   */
  public static function computeJobStatistics(&$job) {
    $job->character_count = 0;
    $job->page_count = 0;
    $items = $job->getItems();
    /* @var TMGMTJobItem $item */
    foreach ($items as $item) {
      if ($item->character_count == 0) {
        self::computeJobItemStatistics($item);
      }
    }
    foreach (self::getUniqueItems($job) as $item_type => $items) {
      foreach ($items as $item) {
        if ($item->character_count > 0) {
          $job->character_count += $item->character_count;
        }
      }
    }
    if ($job->character_count > 0) {
      $cpp = variable_get('osha_tmgmt_characters_per_page', 1500);
      $job->page_count = $job->character_count / $cpp;
    }
  }

  /**
   * Recursively count the length of inner #text keys of this data array.
   *
   * The HTML tags are ignored.
   * The Whitespaces/tabs/newlines are ignored.
   * The &nbsp; are ignored.
   *
   * @param TMGMTJobItem $item
   *   Job item
   * @param int $count
   *   Number of characters from all structures (ie. fields)
   */
  protected static function count($item, &$count) {
    if (!empty($item['#text'])) {
      if (_tmgmt_filter_data($item)) {
        $count += strlen(str_replace("&nbsp;", "", preg_replace("/\s+/", "", strip_tags($item['#text']))));
      }
    }
    elseif (is_array($item)) {
      foreach (element_children($item) as $key) {
        if (is_string($key) && $key == "node_title") {
          continue;
        }
        self::count($item[$key], $count);
      }
    }
  }

  /**
   * Generates an unique array of items, based on item_type and item_id.
   *
   * @param object $job
   *   The job with the items
   *
   * @return array
   *   Items -> Items[item_type][item_id] contains an item
   */
  public static function getUniqueItems($job) {
    $job_items = array();
    foreach ($job->getItems() as $item) {
      if (!isset($job_items[$item->item_type][$item->item_id])) {
        $item->target_languages = array();
        $item->target_languages[] = $item->target_language;

        $job_items[$item->item_type][$item->item_id] = $item;
      }
      else {
        $job_items[$item->item_type][$item->item_id]->target_languages[] = $item->target_language;
      }
    }
    return $job_items;
  }

  /**
   * Returns the job target languages.
   *
   * @param TMGMTJob $job
   *   The job.
   *
   * @return array
   *   Array of language codes
   */
  public static function getJobTargetLanguages(TMGMTJob $job) {
    $target_languages = array();
    foreach ($job->getItems() as $item) {
      $target_languages[] = $item->target_language;
    }

    return array_unique($target_languages);
  }
}
